{"/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/test.js":"/* istanbul instrument in package npmtest_ember_cli_notifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/lib.npmtest_ember_cli_notifications.js":"/* istanbul instrument in package npmtest_ember_cli_notifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_notifications = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_notifications = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-notifications && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_notifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_notifications\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_notifications.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_notifications.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_notifications.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_notifications.__dirname + '/lib.npmtest_ember_cli_notifications.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-cli-notifications',\n\n  options: {\n    cssModules: {\n      postcssOptions: {\n        map: true\n      },\n      plugins: [\n        require('postcss-cssnext')\n      ]\n    }\n  },\n\n  included: function(app) {\n    this._super.included.call(this, app);\n\n    this.importFontAwesome(app);\n  },\n\n  importFontAwesome: function(app) {\n    var projectConfig = this.project.config(app.env);\n    var config = projectConfig['ember-cli-notifications'] || { includeFontAwesome: false };\n\n    if (config.includeFontAwesome) {\n      app.import(app.bowerDirectory + '/font-awesome/fonts/fontawesome-webfont.eot', {\n        destDir: 'fonts'\n      });\n      app.import(app.bowerDirectory + '/font-awesome/fonts/fontawesome-webfont.svg', {\n        destDir: 'fonts'\n      });\n      app.import(app.bowerDirectory + '/font-awesome/fonts/fontawesome-webfont.ttf', {\n        destDir: 'fonts'\n      });\n      app.import(app.bowerDirectory + '/font-awesome/fonts/fontawesome-webfont.woff', {\n        destDir: 'fonts'\n      });\n      app.import(app.bowerDirectory + '/font-awesome/fonts/fontawesome-webfont.woff2', {\n        destDir: 'fonts'\n      });\n      app.import(app.bowerDirectory + '/font-awesome/css/font-awesome.css');\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/addon/components/notification-container.js":"import Ember from 'ember';\nimport layout from '../templates/components/notification-container';\nimport styles from '../styles/components/notification-container';\n\nconst { Component, computed } = Ember;\n\nexport default Component.extend({\n  layout,\n  styles,\n\n  classNameBindings: ['computedPosition'],\n\n  computedPosition: computed('position', function() {\n    if (this.get('position')) return this.get(`styles.c-notification__container--${this.get('position')}`);\n\n    return this.get(`styles.c-notification__container--top`);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/addon/components/notification-message.js":"import Ember from 'ember';\nimport layout from '../templates/components/notification-message';\nimport styles from '../styles/components/notification-message';\n\nconst { Component, computed } = Ember;\n\nexport default Component.extend({\n  layout,\n  styles,\n\n  classNameBindings: [\n    'dismissClass',\n    'clickableClass',\n    'processedType',\n    'notification.cssClasses'\n  ],\n\n  paused: false,\n\n  dismissClass: computed('notification.dismiss', function() {\n    if (!this.get('notification.dismiss')) return this.get('styles.c-notification--in');\n\n    return false;\n  }),\n\n  clickableClass: computed('notification.onClick', function() {\n    if (this.get('notification.onClick')) return this.get('styles.c-notification--clickable');\n\n    return false;\n  }),\n\n  closeIcon: computed('icons', function() {\n    if (this.get('icons') === 'bootstrap') return 'glyphicon glyphicon-remove';\n\n    return 'fa fa-times';\n  }),\n\n  // Set icon depending on notification type\n  notificationIcon: computed('notification.type', 'icons', function() {\n    const icons = this.get('icons');\n\n    if (icons === 'bootstrap') {\n      switch (this.get('notification.type')){\n        case \"info\":\n          return 'glyphicon glyphicon-info-sign';\n        case \"success\":\n          return 'glyphicon glyphicon-ok-sign';\n        case \"warning\":\n        case \"error\":\n          return 'glyphicon glyphicon-exclamation-sign';\n      }\n    }\n\n    switch (this.get('notification.type')){\n      case \"info\":\n        return 'fa fa-info-circle';\n      case \"success\":\n        return 'fa fa-check';\n      case \"warning\":\n        return 'fa fa-warning';\n      case \"error\":\n        return 'fa fa-exclamation-circle';\n    }\n  }),\n\n  mouseDown() {\n    if (this.get('notification.onClick')) {\n      this.get('notification.onClick')(this.get('notification'));\n    }\n  },\n  mouseEnter() {\n    if (this.get('notification.autoClear')) {\n      this.set('paused', true);\n      this.notifications.pauseAutoClear(this.get('notification'));\n    }\n  },\n\n  mouseLeave() {\n    if (this.get('notification.autoClear')) {\n      this.set('paused', false);\n      this.notifications.setupAutoClear(this.get('notification'));\n    }\n  },\n\n  processedType: computed('notification.type', function() {\n    if (this.get('notification.type') && Ember.A(['info', 'success', 'warning', 'error']).includes(this.get('notification.type'))) {\n      return this.get(`styles.c-notification--${this.get('notification.type')}`);\n    }\n  }),\n\n  // Apply the clear animation duration rule inline\n  notificationClearDuration: computed('paused', 'notification.clearDuration', function() {\n    const duration = Ember.Handlebars.Utils.escapeExpression(this.get('notification.clearDuration'));\n    const playState = this.get('paused') ? 'paused' : 'running';\n    return Ember.String.htmlSafe(`animation-duration: ${duration}ms; -webkit-animation-duration: ${duration}ms; animation-play-state: ${playState}; -webkit-animation-play-state: ${playState}`);\n  }),\n\n  actions: {\n    removeNotification() {\n      this.notifications.removeNotification(this.get('notification'));\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/addon/services/notification-messages-service.js":"import Ember from 'ember';\n\nconst assign = Ember.assign || Ember.merge;\n\nexport default Ember.ArrayProxy.extend({\n    content: Ember.A(),\n\n    defaultClearDuration: 3200,\n    defaultAutoClear: false,\n\n    addNotification(options) {\n        // If no message is set, throw an error\n        if (!options.message) {\n            throw new Error(\"No notification message set\");\n        }\n\n        const notification = Ember.Object.create({\n            message: options.message,\n            type: options.type || 'info', // info, success, warning, error\n            autoClear: (Ember.isEmpty(options.autoClear) ? this.get('defaultAutoClear') : options.autoClear),\n            clearDuration: options.clearDuration || this.get('defaultClearDuration'),\n            onClick: options.onClick,\n            htmlContent: options.htmlContent || false,\n            cssClasses: options.cssClasses\n        });\n\n        this.pushObject(notification);\n\n        if (notification.autoClear) {\n            notification.set('remaining', notification.get('clearDuration'));\n            this.setupAutoClear(notification);\n        }\n\n        return notification;\n    },\n\n    // Helper methods for each type of notification\n    error(message, options) {\n      this.addNotification(assign({\n        message: message,\n        type: 'error'\n      }, options));\n    },\n\n    success(message, options) {\n      this.addNotification(assign({\n        message: message,\n        type: 'success'\n      }, options));\n    },\n\n    info(message, options) {\n      this.addNotification(assign({\n        message: message,\n        type: 'info'\n      }, options));\n    },\n\n    warning(message, options) {\n      this.addNotification(assign({\n        message: message,\n        type: 'warning'\n      }, options));\n    },\n\n    removeNotification(notification) {\n        if (!notification) {\n            return;\n        }\n        notification.set('dismiss', true);\n        // Delay removal from DOM for dismissal animation\n        Ember.run.later(this, () => {\n            this.removeObject(notification);\n        }, 500);\n    },\n\n    setupAutoClear(notification) {\n        notification.set('startTime', Date.now());\n\n        const timer = Ember.run.later(this, () => {\n            // Hasn't been closed manually\n            if (this.indexOf(notification) >= 0) {\n                this.removeNotification(notification);\n            }\n        }, notification.get('remaining'));\n\n        notification.set('timer', timer);\n    },\n\n    pauseAutoClear(notification) {\n        Ember.run.cancel(notification.get('timer'));\n\n        const elapsed = Date.now() - notification.get('startTime');\n        const remaining = notification.get('clearDuration') - elapsed;\n        notification.set('remaining', remaining);\n    },\n\n    clearAll() {\n        this.get('content').forEach(notification => {\n            this.removeNotification(notification);\n        });\n    },\n\n    setDefaultAutoClear(autoClear) {\n      if (Ember.typeOf(autoClear) !== 'boolean') {\n        throw new Error('Default auto clear preference must be a boolean');\n      }\n\n      this.set('defaultAutoClear', autoClear);\n    },\n\n    setDefaultClearDuration(clearDuration) {\n      if (Ember.typeOf(clearDuration) !== 'number') {\n        throw new Error('Clear duration must be a number');\n      }\n\n      this.set('defaultClearDuration', clearDuration);\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/app/components/notification-container.js":"export { default } from 'ember-cli-notifications/components/notification-container';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/app/components/notification-message.js":"import NotificationMessage from 'ember-cli-notifications/components/notification-message';\nimport ENV from '../config/environment';\n\nlet config = ENV['ember-cli-notifications'] || {};\n\nexport default NotificationMessage.extend({\n  icons: config.icons || 'font-awesome'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/app/initializers/notifications.js":"import Ember from 'ember';\nimport NotificationMessagesService from 'ember-cli-notifications/services/notification-messages-service';\n\nexport default {\n    name: 'notification-messages-service',\n\n    initialize() {\n        let application = arguments[1] || arguments[0];\n        if (Ember.Service) {\n          application.register('service:notification-messages', NotificationMessagesService);\n          application.inject('component:notification-container', 'notifications', 'service:notification-messages');\n          application.inject('component:notification-message', 'notifications', 'service:notification-messages');\n          return;\n        }\n        application.register('notification-messages:service', NotificationMessagesService);\n\n        ['controller', 'component', 'route', 'router', 'service'].forEach(injectionTarget => {\n            application.inject(injectionTarget, 'notifications', 'notification-messages:service');\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-notifications/node_modules/ember-cli-notifications/app/services/notification-messages-service.js":"export { default } from 'ember-cli-notifications/services/notification-messages-service';\n"}